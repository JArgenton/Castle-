<<class>>
Ent
-------------------
-graphicManager: Graphics* (static)
-body: sf::RectangleShape*
-------------------
+<<create>> Ent(): void
+<<destroy>> ~Ent(): void
+render(): void
+initialize(): void = 0
+execute(): void = 0
+SetTexture(path: string&): void
+setOrigem(width: float, height: float): void

// ... Repeat this pattern for all the other classes ...

<<class>>
Entity : Ent
-------------------
-id: ID
-------------------
+<<create>> Entity(_position: TupleF = TupleF(0.0f, 0.0f), id: ID = empty): void
+<<destroy>> ~Entity(): void
+setPosition(_position: TupleF): void
+setSize(height: float, width: float): void
+getSize(): TupleF
+getPosition(): TupleF
+getId(): ID
+initialize(): void = 0

// ... And so on for all the other classes ...


Inheritance:

Entity inherits from Ent
MovingEntity inherits from Entity
StaticEntity inherits from Entity
Character inherits from MovingEntity
Player inherits from Character
Weapon inherits from MovingEntity
Sword inherits from Weapon
Plataforma inherits from StaticEntity
Aggregation:

Player has an aggregation relationship with Weapon
Weapon has an aggregation relationship with Player
Graphics has an aggregation relationship with Factory<sf::Texture> and Factory<sf::Font>
Collision has an aggregation relationship with EntityList
EntityList has an aggregation relationship with List<Entity>
List<T_LIST> has an aggregation relationship with Node<T_LIST>
Composition:

Node<T_ELEM> has a composition relationship with T_ELEM
Association:

Factory<Resource> has an association with Resource
Graphics has an association with sf::RenderWindow, sf::Clock, sf::View
Dependency:

Tuple<TIPO> has a dependency on TIPO
List<T_LIST> has a dependency on T_LIST
Node<T_ELEM> has a dependency on T_ELEM
