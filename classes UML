<<class>>
Ent
-------------------
-graphicManager: Managers::Graphics* (static)
-body: sf::RectangleShape*
-------------------
+Ent(): void
+~Ent(): void
+render(): void
+initialize(): void = 0
+execute(): void = 0
+SetTexture(path: string&): void
+setOrigem(width: float, height: float): void

/////////////////////////////////////////////////////////////////////////////////////////////////////////

<<class>>
Entities::Entity : Ent
-------------------
-id: Entities::ID
-------------------
+Entity(_position: TupleF = TupleF(0.0f, 0.0f), id: Entities::ID = empty): void
+~Entity(): void
+setPosition(_position: TupleF): void
+setSize(height: float, width: float): void
+getSize(): TupleF
+getPosition(): TupleF
+getId(): Entities::ID
+initialize(): void = 0

/////////////////////////////////////////////////////////////////////////////////////////////////////////

<<class>>
Entities::MovingEntity : Entity
-------------------
-velocity: TupleF
-active: bool
-facingLeft: bool
-animationId: int
-------------------
+MovingEntity(_position: TupleF = TupleF(0.0f, 0.0f), id: Entities::ID = empty): void
+~MovingEntity(): void
+set_velocity(pvelocity: TupleF): void
+setFacing(direction: bool): void
+get_velocity(): TupleF
+get_id(): Entities::ID
+getDamage(): int
+initialize(): void
+colide(other: Entity*, intersec: TupleF): void = 0
+moveOnColision(other: Entity*): void = 0
+isActive(): bool
+isFacingLeft(): bool
+update(dt: float): void = 0
+updateSprite(dt: float): void = 0

/////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Entities/Entity.hpp"

<<class>>
Entities::StaticEntity : Entity
-------------------
-------------------
+StaticEntity(_position: TupleF = TupleF(0.0f, 0.0f), _id: Entities::ID = empty): void
+~StaticEntity(): void
+initialize(): void = 0
+execute(): void

/////////////////////////////////////////////////////////////////////////////////////////////////////////


<<class>>
Entities::Characters::Character : MovingEntity
-------------------
-health: int
-flagcanAtk: bool
-flagIsAtking: bool
-coolDownTimer: float
-atkTimer: float
-atkDamage: int
-atkCooldown: float
-atkDuration: float
-------------------
+Character(_position: TupleF = TupleF(0.0f, 0.0f), id: Entities::ID = empty): void
+~Character(): void
+set_health(_healt: int): void
+set_atkCooldown(_Cooldown: float): void
+set_atkDuration(_Duration: float): void
+set_atkRange(_Range: float): void
+set_atkDamage(_damage: int): void
+get_health(): int
+atack(): void
+reciveDmg(dmg: int): void
+colide(other: Entity*, intersec: TupleF): void = 0
+initialize(): void = 0
+moveOnColision(other: Entity*): void = 0
+incrementAtkTimer(dt: float): void
+canAtk(): bool
+isAtking(): bool
+update(dt: float): void = 0

/////////////////////////////////////////////////////////////////////////////////////////////////////////

<<class>>
Entities::Characters::Player : Character
-------------------
-dmgCooldown: float
-canWalk: bool
-canReciveDmg: bool
-canJump: bool
-isMoving: bool
-dmgTimer: float
-weapon: Weapons::Weapon*
-------------------
+Player(pW: Weapons::Weapon* = nullptr): void
+~Player(): void
+set_weapon(pweapon: Weapons::Weapon*): void
+get_weapon(): Weapons::Weapon*
+atack(): void
+reciveDmg(dmg: int): void
+jump(): void
+walk(toLeft: bool): void
+stop(): void
+execute(): void
+initialize(): void
+colide(other: Entity*, intersec: TupleF): void
+moveOnColision(other: Entity*): void
+updateSprite(dt: float): void
+update(dt: float): void

/////////////////////////////////////////////////////////////////////////////////////////////////////////


<<class>>
Entities::Weapons::Weapon : MovingEntity
-------------------
-owner: Characters::Player*
-------------------
+Weapon(): void
+~Weapon(): void
+atack(): void = 0
+setPlayer(pP: Characters::Player*): void
+WeaponInitialize(pP: Characters::Player*): void = 0
+updateSprite(dt: float): void = 0
+update(dt: float): void = 0
+colide(other: Entity*, intersec: TupleF): void
+moveOnColision(other: Entity*): void
+execute(): void

/////////////////////////////////////////////////////////////////////////////////////////////////////////


<<class>>
Entities::Weapons::Sword : Weapon
-------------------
-------------------
+Sword(): void
+~Sword(): void
+atack(): void
+WeaponInitialize(pP: Characters::Player*): void
+updateSprite(dt: float): void
+update(dt: float): void

/////////////////////////////////////////////////////////////////////////////////////////////////////////

<<class>>
Entities::Obstacles::Plataforma : StaticEntity
-------------------
-------------------
+Plataforma(_position: TupleF = TupleF(80.0f, 100.0f)): void
+~Plataforma(): void
+initialize(): void

/////////////////////////////////////////////////////////////////////////////////////////////////////////


<<class>>
flyweight::Factory<Resource>
-------------------
-FlyweightMap: unordered_map<string, Resource*>
-------------------
+Factory(): void
+~Factory(): void
+getResource(filepath: const string&): Resource*

/////////////////////////////////////////////////////////////////////////////////////////////////////////
<<class>>
managers::Collision
-------------------
-StaticEntities: List::EntityList*
-MovingEntities: List::EntityList*
-instance: Collision*
-------------------
+Collision(StaticEntities: List::EntityList*, MovingEntities: List::EntityList*): void
+~Collision(): void
+check_collision(body1: sf::RectangleShape*, body2: sf::RectangleShape*): TupleF
+exec(): void

/////////////////////////////////////////////////////////////////////////////////////////////////////////

<<class>>
Managers::Graphics
-------------------
-window: sf::RenderWindow*
-textureFactory: flyweight::Factory<sf::Texture>
-fontFactory: flyweight::Factory<sf::Font>
-clock: sf::Clock
-view: sf::View
-frameRateLimit: unsigned int
-dt: float
-instance: Managers::Graphics*
-------------------
+Graphics(): void
+~Graphics(): void
+loadFont(filepath: const string&): sf::Font*
+loadTexture(filepath: const string&): sf::Texture*
+centerViewOn(position: TupleF): void
+getWindowSize(): sf::Vector2u
+getViewBounds(): sf::FloatRect
+isWindowOpen(): bool
+clear(color: const sf::Color& = sf::Color::Black): void
+render(body: sf::RectangleShape*): void
+render(text: sf::Text*): void
+display(): void
+closeWindow(): void
+updateDeltaTime(): void
+pullEvent(pEvent: sf::Event&): bool
+get_instance(): Graphics*

/////////////////////////////////////////////////////////////////////////////////////////////////////////